#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef char String10[11];
typedef char String15[16];
typedef char String20[21];
typedef char String30[31];

typedef struct
{
	int day;
	int month;
	int year;
}dateType;

typedef struct userTag
{
	int role;
	int uid;
	String10 pass;
	String30 address;
	int nContact;
	String20 name;
}userType;

typedef struct itemTag
{
    int productID;
    String20 name;
    String15 catg;
    String30 desc;
    int nQuantity;
    float uPrice;
    int sID;
}itemType;

typedef struct sellerTag
{
	int uid;
	int nItems;
	itemType itemList[20];
}sellerType;

typedef struct transactionTag
{
    dateType date;
    itemType items[5];
    int buyerID;
    int sellerID;
    int totalAmount;
}transactionType;

/****************************************
Description : 
@param :
@return :
*****************************************/
int searchUser(userType users[100], int index)
{
	int i = 0, found = 0;
	int key = users[index].uid;
    while(i < index && found == 0)
	{
		if (key == users[i].uid)
			found = 1;
		i++;
    }
    return found;
}

/****************************************
Description : 
@param :
@return :
*****************************************/
int checkUser(userType users[100], int kUID, String10 kPass, int num)
{
	int i = 0, found = 0, index;
    while(i < num && !found)
	{
	    if (kUID == users[i].uid)
	    {
	    	found = 1;
	    	index = i;
		}
		i++;
    }
    if(found)
    {
    	found = 0;
    	
    	if(strcmp(kPass, users[index].pass) != 0)
    	{
    		found = 1;
    	}
    	
		if(found)
		{
			printf("Error! Incorrect password.\n");
			return 0;
		}
		else
			return 1;
	}
	else
	{
		printf("Error! User not found.\n");
		return 0;
	}
}

/****************************************
Description : 
@param :
@return :
*****************************************/
int findIndex(userType users[100], int key, int num)
{
	int i = 0, found = 0;
    while(i < num && !found)
	{
		if (key == users[i].uid)
			found = 1;
		i++;
    }
    return i-1;
}


/****************************************
Description : 
@param :
@return : 
*****************************************/
void getString(char * str) 
{
  int i;
  char ch;
  
  i = 0;
  do 
  {
    scanf("%c", &ch);
    if (ch != '\n') 
{
      str[i] = ch;
      i++;
    }
  } while (ch != '\n');
  str[i] = '\0';
}

/****************************************
Description : 
@param :
@return : 
*****************************************/
void registerUser(userType *u)
{
	char cDump;
	
	do
	{
	printf("Are you a buyer or seller?\n");
	printf("[1] Buyer\n");
	printf("[2] Seller\n");
	scanf("%d%c", &u->role, &cDump);
	if(u->role != 1 && u->role != 2)
		{
			system("CLS");
			printf("Invalid input!\n");
		}
	}while(u->role != 1 && u->role != 2);
	
	printf("\nEnter your user ID: ");
	scanf("%d%c", &u->uid, &cDump);
	
	printf("Enter your password (up to 10 characters): ");
	getString(u->pass);
	
	printf("Enter your address: ");
	getString(u->address);
	
	printf("Enter your contact number: ");
	scanf("%d%c", &u->nContact, &cDump);
	
	printf("Enter your name: ");
	getString(u->name);
}

/****************************************
Description : 
@param :
@return : 
*****************************************/
void loginUser(int *cUID, String10 *cPass)
{	
	char cDump;
	
	printf("User ID: ");
	scanf("%d%c", &(*cUID), &cDump);
	
	printf("Password: ");
	getString(*cPass);
	printf("\n");
}

/****************************************
Description : 
@param :
@return : 
*****************************************/
int searchSeller(sellerType list[100], int key, int num)
{
	int i = 0, found = 0;
    while(i < num && found == 0)
	{
	    if (key == list[i].uid)
			found = 1;
		i++;
    }
    return i-1;
}

/****************************************
Description : 
@param :
@return : 
*****************************************/
void addItem(itemType *i)
{
	char cDump;
	
	printf("Product ID: ");
	scanf("%d%c", &i->productID, &cDump);
	
	printf("Product name: ");
	getString(i->name);
	
	printf("Category: ");
	getString(i->catg);
	
	printf("Description: ");
	getString(i->desc);
	
	printf("Quantity: ");
	scanf("%d%c", &i->nQuantity, &cDump);
	
	printf("Unit price: ");
	scanf("%f%c", &i->uPrice, &cDump);
	
	printf("Item details saved...\n");
	printf("Press ENTER to continue.\n");
	scanf("%c", &cDump);
}

/****************************************
Description : 
@param :
@return : 
*****************************************/
int searchProduct(itemType list[100], int key)
{
	int i = 0, found = -1;
    while(list[i].productID == 0 && found == 0)
	{
	    if (key == list[i].productID)
			found = 1;
		i++;
    }
    if (found)
    	return i-1;
    else
    	return (-1);
}

/****************************************
Description : 
@param :
@return : 
*****************************************/

void sortItems(itemType iList[20], int num)
{
	int i, j, mIndex, temp;
	for(i=0;i<num-1;i++)
	{
		mIndex = i;
		
		for(j=i+1;j<num;j++)
		{
			if (iList[j].productID < iList[mIndex].productID)
			{
				mIndex = j;	
				
				temp = iList[i].productID;
				iList[i].productID = iList[mIndex].productID;
				iList[mIndex].productID = temp;
			}
		}
	}
}

/****************************************
Description : 
@param :
@return : 
*****************************************/

void displayHeader()
{
	String15 header[5] = {"ProductID", "Item Name", "Category", "Unit Price", "Quantity"};
	printf("%10s ", header[0]);
	printf("%-20s ", header[1]);
	printf("%-15s ", header[2]);
	printf("%10s ", header[3]);
	printf("%2s", header[4]);
	printf("\n");
}

/****************************************
Description : 
@param :
@return : 
*****************************************/

void displayItems(itemType i)
{
	printf("%10d ", i.productID);
	printf("%-20s ", i.name);
	printf("%-15s ", i.catg);
	printf("%.2f ", i.uPrice);
	printf("%2d", i.nQuantity);
	printf("\n");
}
/****************************************
Description : 
@param :
@return : 
*****************************************/

void editItem(itemType *i)
{
	int choice, add;
	char cDump;
	
	do
	{
		system("CLS");
		printf("\n---Edit stock---\n");
		printf("[1] Replenish\n");
		printf("[2] Change Price\n");
		printf("[3] Change Item Name\n");
		printf("[4] Change Category\n");
		printf("[5] Change Description\n");
		printf("[6] Finish Editing\n");
		
		printf("Enter: ");
		scanf("%d%c", &choice, &cDump);
		
		switch(choice)
		{
			case 1:
				printf("\nAdd quantity: ");
				scanf("%d%c", &add, &cDump);
				i->nQuantity += add;
				break;
			case 2:
				printf("\nNew price: ");
				scanf("%f%c", &i->uPrice, &cDump);
				break;
			case 3:
				printf("\nNew item name: ");
				getString(i->name);
				break;
			case 4:
				printf("\nNew category: ");
				getString(i->catg);
				break;
			case 5:
				printf("\nNew description: ");
				getString(i->desc);
				break;
			case 6:
				printf("Press ENTER to return to sell menu.\n");
			default:
				printf("\nInvalid choice!");
				printf("Press ENTER to select again.\n");
				scanf("%c", &cDump);
				break;
		}
	}while(choice != 6);
	
	if(choice != 6)
	{
	printf("Item details saved...\n");
	printf("Press ENTER to continue.\n");
	scanf("%c", &cDump);
	}
}

/**
void registerUser(userType *u, int numUsers)
{
    printf("Enter user ID: ");
    scanf("%d", &u.userID);
    // checking userID duplicate

    // input user name
    printf("Enter user name: ");
    scanf("%s", name);

    // adding the user to array

    u[*numUsers].type.buyer = 'Y'; //y = buyer
    u[*numUsers].type.seller = 'N'; //n = seller
    u[*numUsers].userID = userID;
    strcpy(u[*numUsers].pass, "password");
    strcpy(u[*numUsers].address, "address");
    u[*numUsers].nContact = 1234567890;
    strcpy(users[*numUsers].name, name);
    (*numUsers)++;
    printf("User registered successfully\n");

}
**/

int main()
{
	userType UserList[100];
	sellerType SellerList[100];
	
	int choice = 0, schoice = 0, nUsers = 0, found = 0, nSellers = 0, nBuyers = 0, nItems = 0;
	int index, valid, nProduct;
	int i, pI;
	int numItems = 0;
	String10 cPass;
	int cUID = 0;
	char cDump;
	
	//Main menu
	while(choice != 1 || choice != 2)
	{
		system("CLS");
		printf("---Main Menu---\n");
		printf("[1] Register\n");
		printf("[2] Log-in\n");
		scanf("%d%c", &choice, &cDump);
		
		switch(choice)
		{
			//User registration
			case 1:
				system("CLS");
				printf("---Register user---\n");
				registerUser(&UserList[nUsers]);
				do
				{
					found = searchUser(UserList, nUsers);
					if(found)
					{
						system("CLS");
						printf("User ID already exists!\n");
						printf("\nEnter your user ID: ");
						scanf("%d%c", &UserList->uid, &cDump);
					}
				}while(found);
				if (UserList[nUsers].role == 1)
				{
					SellerList[nSellers].uid = UserList[nUsers].uid;
					nBuyers++;
				}
				else
				{
					SellerList[nSellers].uid = UserList[nUsers].uid;
					nSellers++;
				}
				nUsers++;
				break;
			
			//User login
			case 2:
				system("CLS");
				printf("---Log-in---\n");
				loginUser(&cUID, &cPass);
				valid = checkUser(UserList, cUID, cPass, nUsers);
				if(!valid)
				{
					printf("Press ENTER to return to main menu.\n");
					scanf("%c", &cDump);
					system("CLS");
					break;
				}
				else
				{
					index = findIndex(UserList, cUID, nUsers);
					system("CLS");
					
					switch (UserList[index].role)
					{
						//BUY MENU
						case 1:
							do
							{
								
							}while()
							break;
						
						//SELL MENU
						case 2:
							do
							{
							index = searchSeller(SellerList, cUID, nUsers);
							printf("---Sell Menu---\n");
							printf("[1] Add New Item\n");
							printf("[2] Edit Stock\n");
							printf("[3] Show My Products\n");
							printf("[4] Show My Low Stock Products\n");
							printf("[5] Exit\n");
							printf("Enter: ");
							scanf("%d%c", &schoice, &cDump);
							
							switch (schoice)
							{
								case 1:
									if (SellerList[index].nItems < 20)
									{
										addItem(&SellerList[index].itemList[nItems]);
										numItems++;
									}
									else
									{
										printf("Limit of number of items has been reached.\n");
										printf("Press ENTER to return to sell menu.\n");
										scanf("%c", &cDump);
									}
									break;
									
								case 2:
									if (SellerList[index].nItems > 0)
									{
										sortItems(SellerList[index].itemList, numItems);
										displayHeader();
										for(i=0;i<5;i++)
										{
										displayItems(SellerList[index].itemList[i]);
										}
										printf("\n---Edit stock---\n");
										printf("Product ID: ");
										scanf("%d%c", &nProduct, &cDump);
										
										if(searchProduct(SellerList[index].itemList, nProduct) != -1)
										{
											pI = searchProduct(SellerList[index].itemList, nProduct);
											editItem(&(SellerList[index].itemList[pI]));
										}
										else
										{
											printf("Invalid product ID!");
											printf("Press ENTER to return to the Sell Menu.\n");
											scanf("%c", &cDump);
										}
									}
									else
										printf("Error: Insufficient number of items.\n");
									break;
									
								case 3:
									displayHeader();
									for(i=0;i<5;i++)
									{
									displayItems(SellerList[index].itemList[i]);
									}
									printf("Press ENTER to return to the sell menu.\n");
									scanf("%c", &cDump);
									break;
									
									
								case 4:
									sortItems(SellerList[index].itemList, numItems);
									displayHeader();
									for(i=0;i<SellerList[index].nItems;i++)
									{
										if(SellerList[index].nItems < 5)
											displayItems(SellerList[index].itemList[i]);
									}
									printf("Press ENTER to return to the sell menu.\n");
									scanf("%c", &cDump);
									break;
								
								case 5:
									printf("Press ENTER to exit sell menu.\n");
									scanf("%c", &cDump);
									break;
									
								default:
									system("CLS");
									printf("Invalid Input! Please try again.");
									break;
							}
							break;
						}while(schoice != 5);
					}
				}
				break;
				
			default:
				system("CLS");
				printf("Invalid input! Please try again.\n");
				break;
		}
	}
	
	return 0;
}
